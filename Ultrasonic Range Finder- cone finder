
#pragma config(Sensor, dgtl8,  sonarSensor,         sensorSONAR_cm)
#pragma config(Motor,  port2,           leftMotor,     tmotorNormal, openLoop, reversed)
#pragma config(Motor,  port3,           rightMotor,    tmotorNormal, openLoop)

task main()
{
  int speed;            // Will hold a speed for the motors.
  int sonar_value;      // Will hold the current reading of the sonar sensor.
  int sonarpre;
  int distance = 25;    // Specified distance to be at 25 centimeters.
  int locateL = 0;
  int locateR = 0;
  int locate = 0;
  int servL;
  int servR;
  int servT;
  
  
  while(locate == 0)
  {
   motor[servoMotor] = -127;  // reset sweep to one side
   wait1Msec(500);            // give time for servo to move
   
   for(int i = -127; i < 127; i+1)
   {
    motor[servoMotor] = i;
    wait1Msec(20);
    sonarpre = sonar_value;
    sonar_value = SensorValue(sonarSensor);
    
    if(((sonar_value - sonarpre) < 0) && (locateL == 0) && (locate == 0))
    {
      locateL = 1;
      servL = motor[servoMotor];
    }
    
    if(((sonarpre - sonar_value) <0) && (locateL == 1))
    {
      locateR = 1;
      servR = motor[servoMotor];
      locate = 1;
    }
    }
    
   servT = (servL + servR)/2; // find center of object
    
   // need code for the turning ratio to square robot with object then continues with the sample code when object is aquired
   
   
  
  
  while(true)
  {
    sonar_value = SensorValue(sonarSensor);   // Store the current reading from the Sonar Sensor to 'sonar_value'.

    clearLCDLine(0);                          /* Display the    */
    displayLCDPos(0,0);                       /* reading of the */
    displayNextLCDString("Sonar: ");          /* Sonar Sensor   */
    displayNextLCDNumber(sonar_value);        /* on line 0.     */

    if(sonar_value < 0)                       // If the object is out of range: (returns -1)
    {
      speed = 127;                            // Set 'speed' to full speed ahead!
    }
    else
    {
      speed = (sonar_value - distance)*2;     // Move the robot at a speed proportional to how far off its desired distance it currently is
    }

    clearLCDLine(1);                          /* Display the    */
    displayLCDPos(1,0);                       /* current speed  */
    displayNextLCDString("Speed: ");          /* of the motors  */
    displayNextLCDNumber(speed);              /* on line 1.     */

    motor[leftMotor]  = speed;                /* Set both the left and right */
    motor[rightMotor] = speed;                /* motors to run at 'speed'.   */

    wait1Msec(100);                           // Take 10 readings per second.
  }
}




